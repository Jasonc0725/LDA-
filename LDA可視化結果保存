import pandas as pd
import numpy as np
from gensim import corpora, models
from gensim.models.coherencemodel import CoherenceModel
from sklearn.feature_extraction.text import CountVectorizer
import matplotlib.pyplot as plt
import pyLDAvis
import pyLDAvis.gensim_models as gensimvis
from google.colab import files  # 用於下載文件
import os

# 讀取上傳的CSV檔案
file_path = "cleaned_processed_content.csv"  # 修改為你的文件名
data = pd.read_csv(file_path)

# 將Processed_Content列轉換為詞列表
seg_lst = data['Processed_Content'].apply(lambda x: x.split()).tolist()

# 建立詞典和語料庫
dictionary = corpora.Dictionary(seg_lst)
corpus = [dictionary.doc2bow(text) for text in seg_lst]

# 定義函數來計算一致性值
def compute_coherence_values(dictionary, corpus, texts, limit, start=2, step=1):
    coherence_values = []
    model_list = []
    for num_topics in range(start, limit, step):
        model = models.LdaModel(corpus=corpus, id2word=dictionary, num_topics=num_topics, random_state=42, update_every=1, chunksize=100, passes=10, alpha='auto', per_word_topics=True)
        model_list.append(model)
        coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v')
        coherence_values.append(coherencemodel.get_coherence())
    return model_list, coherence_values

# 計算一致性值
model_list, coherence_values = compute_coherence_values(dictionary=dictionary, corpus=corpus, texts=seg_lst, start=2, limit=20, step=1)

# 繪製一致性圖
limit = 20
start = 2
step = 1
x = range(start, limit, step)
plt.plot(x, coherence_values)
plt.xlabel("Num Topics")
plt.ylabel("Coherence Score")
plt.title("Coherence Scores for Different Number of Topics")
plt.show()

# 打印一致性最高的主題數
optimal_num_topics = x[coherence_values.index(max(coherence_values))]
print(f"The optimal number of topics is {optimal_num_topics}")

# 打印最佳LDA模型的主題
optimal_model = model_list[coherence_values.index(max(coherence_values))]
print("Optimal LDA Model Topics:")
for idx, topic in optimal_model.print_topics():
    print(f"Topic {idx + 1}: {topic}")

# 可視化最佳LDA模型
pyLDAvis.enable_notebook()
vis = gensimvis.prepare(optimal_model, corpus, dictionary)
pyLDAvis.display(vis)

# 保存可視化結果
output_file_path = f"{optimal_num_topics}_topic_model.html"
pyLDAvis.save_html(vis, output_file_path)
print(f"LDA可視化結果已保存至 {output_file_path}")

# 下載文件到本地
files.download(output_file_path)
